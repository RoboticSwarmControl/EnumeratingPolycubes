function numFinal = DrawWithAnyColor()
% Enumerate all the polycubes of size n tiles (Blue, Red and Cyan)
% fix the origin at the leftmost cube
% Only add cubes when:
% {(x, y, z) | (z > 0) or ((z = 0) and (y > 0)) or ((z = 0) and (y = 0) and x > 0)}.
% Aaron T. Becker & Yitong Lu

% Rules:
% For Red:     Red and Red cannot connect along z and y
%              Red and Green cannot connect along z
%              Red and Yellow cannot connect along y
%              Red and Magenta cannot connect along z
%              Red and Orange cannot connect along y

% For Blue:    Blue and Blue cannot connect along z and y
%              Blue and Green cannot connect along y
%              Blue and Yellow cannot connect along z
%              Blue and Cyan cannot connect along z
%              Blue and Brown cannot connect along y

% For Green:   Green and Green cannot connect along z and y
%              Green and Blue cannot connect along y
%              Green and Red cannot connect along z
%              Green and Magenta cannot connect along z
%              Green and Brown cannot connect along y

% For Yellow:  Yellow and Yellow cannot connect along z and y
%              Yellow and Blue cannot connect along z
%              Yellow and Red cannot connect along y
%              Yellow and Cyan cannot connect along z
%              Yellow and Orange cannot connect along y

% For Cyan:    Cyan and Cyan cannot connect along z
%              Cyan and Blue cannot connect along z
%              Cyan and Yellow cannot connect along z

% For Magenta: Magenta and Magenta cannot connect along z
%              Magenta and Red cannot connect along z
%              Magenta and Green cannot connect along z

% For Brown:   Brown and Brown cannot connect along y
%              Brown and Blue cannot connect along y
%              Brown and Green cannot connect along y

% For Orange:  Orange and Orange cannot connect along y
%              Orange and Red cannot connect along y
%              Orange and Yellow cannot connect along y

% For Black:   Black can connect any colors along x


format compact

if nargin <1
    n = 3;
    nRed = 1;
    nBlue = 1;
    nCyan = 1;
    nGreen = 0;
    nYellow = 0;
    nMagenta = 0;
    nBlack = 0;
    nBrown = 0;
    nOrange = 0;
end

% Initialization
polyList = zeros(n,1); % which tiles in adjTiles are used
adjTiles = zeros(4*n+2,3);

polyList(1) = 1; % set first tile was used

adjTiles(1:4,:) = [0,0,0;
    0,1,0;
    1,0,0;
    0,0,1;];

numTiles = 1;
numAdj = 4;
colors = -1*ones(n,1);
numpolys = 0;  %#ok<NASGU>

if nRed>0
    colors(1) = 1;  % set first tile was red
    [numpolysR,polysR] = recursPolyBuild(adjTiles, polyList, numTiles,numAdj,n,colors,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
else
    numpolysR = 0;
    polysR = [];
end
if nBlue>0
    colors(1) = 0;  % set first tile was blue
    [numpolysB,polysB] = recursPolyBuild(adjTiles, polyList, numTiles,numAdj,n,colors,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
else
    numpolysB = 0;
    polysB = [];
end
if nCyan>0
    colors(1) = 2;  % set first tile was cyan
    [numpolysC,polysC] = recursPolyBuild(adjTiles, polyList, numTiles,numAdj,n,colors,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
else
    numpolysC = 0;
    polysC = [];
end
if nGreen>0
    colors(1) = 3;  % set first tile was green
    [numpolysG,polysG] = recursPolyBuild(adjTiles, polyList, numTiles,numAdj,n,colors,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
else
    numpolysG = 0;
    polysG = [];
end
if nYellow>0
    colors(1) = 4;  % set first tile was yellow
    [numpolysY,polysY] = recursPolyBuild(adjTiles, polyList, numTiles,numAdj,n,colors,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
else
    numpolysY = 0;
    polysY = [];
end
if nMagenta>0
    colors(1) = 5;  % set first tile was magenta
    [numpolysM,polysM] = recursPolyBuild(adjTiles, polyList, numTiles,numAdj,n,colors,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
else
    numpolysM = 0;
    polysM = [];
end
if nBlack>0
    colors(1) = 6;  % set first tile was black
    [numpolysBL,polysBL] = recursPolyBuild(adjTiles, polyList, numTiles,numAdj,n,colors,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
else
    numpolysBL = 0;
    polysBL = [];
end
if nBrown>0
    colors(1) = 7;  % set first tile was brown
    [numpolysBR,polysBR] = recursPolyBuild(adjTiles, polyList, numTiles,numAdj,n,colors,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
else
    numpolysBR = 0;
    polysBR = [];
end
if nOrange>0
    colors(1) = 8;  % set first tile was orange
    [numpolysO,polysO] = recursPolyBuild(adjTiles, polyList, numTiles,numAdj,n,colors,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
else
    numpolysO = 0;
    polysO = [];
end

numpolys = numpolysR + numpolysB + numpolysC + numpolysG + numpolysY + numpolysM + numpolysBL + numpolysBR + numpolysO;
polys = [polysR,polysB,polysC,polysG,polysY,polysM,polysBL,polysBR,polysO];


% Check if the connection is correct or not
polyFinal = {};
for np = 1:numpolys
    numcomp = ccMagneticPolycubeAll(polys{np});
    if numcomp==1
       polyFinal(end+1) = polys(np); %#ok<AGROW>
    end
end

numFinal = numel(polyFinal);
disp(['With n=',num2str(n), ' cubes with ',num2str(nRed),' reds,', num2str(nBlue),' blues,', num2str(nCyan),' cyans,', num2str(nGreen),' greens,', num2str(nYellow),' yellows,', num2str(nMagenta),' magentas,', num2str(nBlack),' blacks,', num2str(nBrown),' browns,','there are ', num2str(numFinal),' colored polycubes'])

%filenm = ['With n=',num2str(n), ' cubes with ',num2str(nRed),' reds,', num2str(nBlue),' blues,', num2str(nCyan),' cyans,', num2str(nGreen),' greens,', num2str(nYellow),' yellows,', num2str(nMagenta),' magentas,', num2str(nBlack),' blacks,', num2str(nBrown),' browns,','there are ', num2str(numFinal),' colored polycubes','.mat'];
%save(filenm, 'numFinal' );

c = ceil(sqrt(numFinal));
r = c;

for i = 1:numFinal
    subplot(r,c,i)
    for ep = 1:n
        if polyFinal{i}(ep,4)==1
            DisplayWorkspace3D(polyFinal{i}(ep,:),1,1,1,'r');
        elseif polyFinal{i}(ep,4)==0
            DisplayWorkspace3D(polyFinal{i}(ep,:),1,1,1,'b');
        elseif polyFinal{i}(ep,4)==2
            DisplayWorkspace3D(polyFinal{i}(ep,:),1,1,1,'c');
        elseif polyFinal{i}(ep,4)==3
            DisplayWorkspace3D(polyFinal{i}(ep,:),1,1,1,'g');
        elseif polyFinal{i}(ep,4)==4
            DisplayWorkspace3D(polyFinal{i}(ep,:),1,1,1,'y');
        elseif polyFinal{i}(ep,4)==5
            DisplayWorkspace3D(polyFinal{i}(ep,:),1,1,1,'m');
        elseif polyFinal{i}(ep,4)==6
            DisplayWorkspace3D(polyFinal{i}(ep,:),1,1,1,'k');
        elseif polyFinal{i}(ep,4)==7
            DisplayWorkspace3D(polyFinal{i}(ep,:),1,1,1,'[0.5 0 0]');
        elseif polyFinal{i}(ep,4)==8
            DisplayWorkspace3D(polyFinal{i}(ep,:),1,1,1,'[1 0.4 0]');
        end
    end
    axis tight
    set(gca,'xtick','','ytick','','ztick','','Visible','off')
    
end


end

function [numpolys,polys] = recursPolyBuild(adjTiles,polyList,numTiles,numAdj,n,colors,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange)
numpolys = 0;
polys = {};
a = [0,0,0]; %#ok<NASGU>

if numTiles+1 == n
    % for each, see if it can be colored by the 1 remaining tile    
    if sum(colors==0)<nBlue % if remain color is blue
        remColor = 0;
    end  
    if sum(colors==1)<nRed % if remain color is red
        remColor = 1;
    end 
    if sum(colors==2)<nCyan % if remain color is cyan
        remColor = 2;
    end
    if sum(colors==3)<nGreen % if remain color is green
        remColor = 3;
    end
    if sum(colors==4)<nYellow % if remain color is yellow
        remColor = 4;
    end
    if sum(colors==5)<nMagenta % if remain color is magenta
        remColor = 5;
    end
    if sum(colors==6)<nBlack % if remain color is black
        remColor = 6;
    end
    if sum(colors==7)<nBrown % if remain color is brown
        remColor = 7;
    end
    if sum(colors==8)<nOrange % if remain color is orange
        remColor = 8;
    end
    
    for i = polyList(numTiles)+1 : numAdj
        if remColor==0 && ~any(  (remColor == colors(1:numTiles)) & ... % Blue
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ...
                ~any(  (remColor == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % blue colors cannot connect along z and y
                ~any(  (2 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % blue and Cyan cannot connect along z
                ~any(  (3 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % blue and green cannot connect along y
                ~any(  (4 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % blue and yellow cannot connect along z
                ~any(  (7 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) )  % blue and Brown cannot connect along y
            polysN = [adjTiles([polyList(1:numTiles);i],:), [colors(1:numTiles);remColor]];
            numpolys = numpolys+1;
            polys = [polys,polysN];   %#ok<AGROW>
            
        elseif remColor==1 && ~any(  (remColor == colors(1:numTiles)) & ... % Red
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ...
                ~any(  (remColor == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ...  % red colors cannot connect along z and y
                ~any(  (3 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % red and green cannot connect along z
                ~any(  (4 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % red and yellow cannot connect along y
                ~any(  (5 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % red and magenta cannot connect along z
                ~any(  (8 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) )  % red and orange cannot connect along y
            polysN = [adjTiles([polyList(1:numTiles);i],:), [colors(1:numTiles);remColor]];
            numpolys = numpolys+1;
            polys = [polys,polysN];   %#ok<AGROW>
            
        elseif remColor==2 && ~any(  (remColor == colors(1:numTiles)) & ... % Cyan
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % Cyan colors cannot connect along z
                ~any(  (0 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % Cyan and blue cannot connect along z
                ~any(  (4 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) )  % Cyan and yellow cannot connect along z
            polysN = [adjTiles([polyList(1:numTiles);i],:), [colors(1:numTiles);remColor]];
            numpolys = numpolys+1;
            polys = [polys,polysN];   %#ok<AGROW>
            
        elseif remColor==3 && ~any(  (remColor == colors(1:numTiles)) & ... % Green
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ...
                ~any(  (remColor == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % green colors cannot connect along z and y
                ~any(  (0 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % green and blue cannot connect along y
                ~any(  (1 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % green and red cannot connect along z
                ~any(  (5 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % green and magenta cannot connect along z
                ~any(  (7 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) )  % green and brown cannot connect along y
            polysN = [adjTiles([polyList(1:numTiles);i],:), [colors(1:numTiles);remColor]];
            numpolys = numpolys+1;
            polys = [polys,polysN];   %#ok<AGROW>
            
        elseif remColor==4 && ~any(  (remColor == colors(1:numTiles)) & ... % Yellow
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ...
                ~any(  (remColor == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % yellow colors cannot connect along z and y
                ~any(  (1 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % Yellow and red cannot connect along y
                ~any(  (0 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % Yellow and blue cannot connect along z
                ~any(  (2 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % Yellow and cyan cannot connect along z
                ~any(  (8 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) % Yellow and orange cannot connect along y
            polysN = [adjTiles([polyList(1:numTiles);i],:), [colors(1:numTiles);remColor]];
            numpolys = numpolys+1;
            polys = [polys,polysN];   %#ok<AGROW>
            
        elseif remColor==5 && ~any(  (remColor == colors(1:numTiles)) & ... % Magenta
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % Magenta colors cannot connect along z
                ~any(  (3 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % Magenta and green cannot connect along z
                ~any(  (1 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
                (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
                |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) )  % Magenta and red cannot connect along z
            polysN = [adjTiles([polyList(1:numTiles);i],:), [colors(1:numTiles);remColor]];
            numpolys = numpolys+1;
            polys = [polys,polysN];   %#ok<AGROW>
            
        elseif remColor==6  % Black
            polysN = [adjTiles([polyList(1:numTiles);i],:), [colors(1:numTiles);remColor]];
            numpolys = numpolys+1;
            polys = [polys,polysN];   %#ok<AGROW>
            
        elseif remColor==7 && ~any(  (remColor == colors(1:numTiles)) & ... % Brown
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % Brown colors cannot connect along y
                ~any(  (0 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % Brown and blue cannot connect along y
                ~any(  (3 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) )  % Brown and green cannot connect along y
            polysN = [adjTiles([polyList(1:numTiles);i],:), [colors(1:numTiles);remColor]];
            numpolys = numpolys+1;
            polys = [polys,polysN];   %#ok<AGROW>
            
        elseif remColor==8 && ~any(  (remColor == colors(1:numTiles)) & ... % Orange
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % Orange colors cannot connect along y
                ~any(  (1 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % Orange and red cannot connect along y
                ~any(  (4 == colors(1:numTiles)) & ...
                (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
                (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
                |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) )  % Orange and yellow cannot connect along y
            polysN = [adjTiles([polyList(1:numTiles);i],:), [colors(1:numTiles);remColor]];
            numpolys = numpolys+1;
            polys = [polys,polysN];   %#ok<AGROW>
        end
    end
    return; % exit the recursion
end

% Now pick a number between polyList(numTiles)+1 and numAdj,
for i = polyList(numTiles)+1 : numAdj
    adjTilesi = adjTiles;
    polyListi = polyList;
    numAdji = numAdj;
    b = adjTiles(i,:);
    % add a square at that location.
    polyListi(numTiles+1) = i;
    
    % Number the unnumbered adjacent squares, starting with 5, remove ones already in adjList
    a = b + [0,1,0];
    if ~any(adjTiles(:,1)==a(1) & adjTiles(:,2)==a(2) & adjTiles(:,3)==a(3))
        numAdji = 1 + numAdji;
        adjTilesi(numAdji,:) = a;
    end
    a = b + [1,0,0];
    if ~any(adjTiles(:,1)==a(1) & adjTiles(:,2)==a(2) & adjTiles(:,3)==a(3))
        numAdji = 1 + numAdji;
        adjTilesi(numAdji,:) = a;
    end
    a = b + [0,0,1];
    if ~any(adjTiles(:,1)==a(1) & adjTiles(:,2)==a(2) & adjTiles(:,3)==a(3))
        numAdji = 1 + numAdji;
        adjTilesi(numAdji,:) = a;
    end

    a = b + [0,-1,0];
    % (z > 0) or ((z = 0) and (y > 0)) or ((z = 0) and (y = 0) and x > 0)}.
    if a(3)>0 || (a(3)==0 && a(2)>0) || (a(3)==0 && a(2)==0 && a(1)>0) 
        if ~any(adjTiles(:,1)==a(1) & adjTiles(:,2)==a(2) & adjTiles(:,3)==a(3))
            numAdji = 1 + numAdji;
            adjTilesi(numAdji,:) = a;
        end
    end
    a = b + [-1,0,0];
    if a(3)>0 || (a(3)==0 && a(2)>0) || (a(3)==0 && a(2)==0 && a(1)>0)
        if ~any(adjTiles(:,1)==a(1) & adjTiles(:,2)==a(2) & adjTiles(:,3)==a(3))
            numAdji = 1 + numAdji;
            adjTilesi(numAdji,:) = a;
        end
    end
    a = b + [0,0,-1];
    if a(3)>0 || (a(3)==0 && a(2)>0) || (a(3)==0 && a(2)==0 && a(1)>0)
        if ~any(adjTiles(:,1)==a(1) & adjTiles(:,2)==a(2) & adjTiles(:,3)==a(3))
            numAdji = 1 + numAdji;
            adjTilesi(numAdji,:) = a;
        end
    end
    
    % can we color tile i red?
    if (sum(colors==1)< nRed) && ...
            ~any(  (1 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ...
            ~any(  (1 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % same red color cannot connect along z and y
            ~any(  (3 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % red and green cannot connect along z
            ~any(  (4 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % red and yellow cannot connect along y
            ~any(  (5 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % red and magenta cannot connect along z
            ~any(  (8 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) )  % red and orange cannot connect along y
        colorsi = colors;
        colorsi(numTiles+1) = 1;
        [numpolysN,polysN] = recursPolyBuild(adjTilesi,polyListi,numTiles+1,numAdji,n,colorsi,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
        numpolys = numpolys + numpolysN;
        polys = [polys,polysN]; %#ok<AGROW>
    end
    
    % can we color tile i blue?
    if (sum(colors==0) < nBlue) && ...
            ~any(  (0 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ...
            ~any(  (0 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % same blue color cannot connect along z and y
            ~any(  (2 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % blue and Cyan cannot connect along z
            ~any(  (3 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % blue and green cannot connect along y
            ~any(  (4 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % blue and yellow cannot connect along z
            ~any(  (7 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) )  % blue and Brown cannot connect along y
        colorsi = colors;
        colorsi(numTiles+1) = 0;
        [numpolysN,polysN] = recursPolyBuild(adjTilesi,polyListi,numTiles+1,numAdji,n,colorsi,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
        numpolys = numpolys + numpolysN;
        polys = [polys,polysN]; %#ok<AGROW>
    end
    
    % can we color tile i cyan? 
    if (sum(colors==2) < nCyan) && ...
            ~any(  (2 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % Cyan cannot connect along z
            ~any(  (0 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % Cyan and blue cannot connect along z
            ~any(  (4 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) )  % Cyan and yellow cannot connect along z
        colorsi = colors;
        colorsi(numTiles+1) = 2;
        [numpolysN,polysN] = recursPolyBuild(adjTilesi,polyListi,numTiles+1,numAdji,n,colorsi,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
        numpolys = numpolys + numpolysN;
        polys = [polys,polysN]; %#ok<AGROW>
    end
    
    % can we color tile i green?
    if (sum(colors==3) < nGreen) && ...
            ~any(  (3 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ...
            ~any(  (3 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % same green color cannot connect along z and y
            ~any(  (0 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % green and blue cannot connect along y
            ~any(  (1 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % green and red cannot connect along z
            ~any(  (5 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % green and magenta cannot connect along z
            ~any(  (7 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) )  % green and brown cannot connect along y
        colorsi = colors;
        colorsi(numTiles+1) = 3;
        [numpolysN,polysN] = recursPolyBuild(adjTilesi,polyListi,numTiles+1,numAdji,n,colorsi,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
        numpolys = numpolys + numpolysN;
        polys = [polys,polysN]; %#ok<AGROW>
    end
    
    % can we color tile i yellow?
    if (sum(colors==4) < nYellow) && ...
            ~any(  (4 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ...
            ~any(  (4 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % same yellow color cannot connect along z and y
            ~any(  (1 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % Yellow and red cannot connect along y
            ~any(  (0 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % Yellow and blue cannot connect along z
            ~any(  (2 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % Yellow and cyan cannot connect along z
            ~any(  (8 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) % Yellow and orange cannot connect along y
        colorsi = colors;
        colorsi(numTiles+1) = 4;
        [numpolysN,polysN] = recursPolyBuild(adjTilesi,polyListi,numTiles+1,numAdji,n,colorsi,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
        numpolys = numpolys + numpolysN;
        polys = [polys,polysN]; %#ok<AGROW>
    end
    
    % can we color tile i magenta? 
    if (sum(colors==5) < nMagenta) && ...
            ~any(  (5 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % Magenta cannot connect along z
            ~any(  (3 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) ) && ... % Magenta and green cannot connect along z
            ~any(  (1 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)) & ...
            (   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)-1) ...
            |   (adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)+1)) )  % Magenta and red cannot connect along z
        colorsi = colors;
        colorsi(numTiles+1) = 5;
        [numpolysN,polysN] = recursPolyBuild(adjTilesi,polyListi,numTiles+1,numAdji,n,colorsi,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
        numpolys = numpolys + numpolysN;
        polys = [polys,polysN]; %#ok<AGROW>
    end
    
    % can we color tile i black? 
    if (sum(colors==6) < nBlack) 
        colorsi = colors;
        colorsi(numTiles+1) = 6;
        [numpolysN,polysN] = recursPolyBuild(adjTilesi,polyListi,numTiles+1,numAdji,n,colorsi,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
        numpolys = numpolys + numpolysN;
        polys = [polys,polysN]; %#ok<AGROW>
    end
    
    % can we color tile i brown? 
    if (sum(colors==7) < nBrown) && ...
            ~any(  (7 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % Brown cannot connect along y
            ~any(  (0 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % Brown and blue cannot connect along y
            ~any(  (3 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) )  % Brown and green cannot connect along y
        colorsi = colors;
        colorsi(numTiles+1) = 7;
        [numpolysN,polysN] = recursPolyBuild(adjTilesi,polyListi,numTiles+1,numAdji,n,colorsi,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
        numpolys = numpolys + numpolysN;
        polys = [polys,polysN]; %#ok<AGROW>
    end
    
    % can we color tile i orange?
    if (sum(colors==8) < nOrange) && ...
            ~any(  (8 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % Orange cannot connect along y
            ~any(  (1 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) ) && ... % Orange and red cannot connect along y
            ~any(  (4 == colors(1:numTiles)) & ...
            (adjTiles(polyList(1:numTiles),1) == adjTiles(i,1) & adjTiles(polyList(1:numTiles),3) == adjTiles(i,3)) & ...
            (   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)-1) ...
            |   (adjTiles(polyList(1:numTiles),2) == adjTiles(i,2)+1)) )  % Orange and yellow cannot connect along y
        colorsi = colors;
        colorsi(numTiles+1) = 8;
        [numpolysN,polysN] = recursPolyBuild(adjTilesi,polyListi,numTiles+1,numAdji,n,colorsi,nRed,nBlue,nGreen,nCyan,nYellow,nMagenta,nBlack,nBrown,nOrange);
        numpolys = numpolys + numpolysN;
        polys = [polys,polysN]; %#ok<AGROW>
    end

end

end

function DisplayWorkspace3D(origin,X,Y,Z,color)
% origin = origin point for the cube in the form of [x,y,z].
% X      = cube length along x direction.
% Y      = cube length along y direction.
% Z      = cube length along z direction.

% Define the vertexes of the unit cubic
ver = [0 0 0; 1 0 0; 1 1 0; 0 1 0; 0 0 1; 1 0 1; 1 1 1; 0 1 1];

% Define the faces of the unit cubic
fac = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];

cube = [ver(:,1)*X+origin(1),ver(:,2)*Y+origin(2),ver(:,3)*Z+origin(3)];
patch('Faces',fac,'Vertices',cube,'FaceColor',color);

ax1 = [0.6,0.6,0.8];
ay1 = [0.1,0.5,0.5];
aX = [ax1,0.5,1-fliplr(ax1)];
aY = [ay1,0.8,fliplr(ay1)];
aZ = 0.01*ones(size(aY));

patch(origin(1)+aY,origin(2)-aZ,origin(3)+aX,'w'); %draw the arrows!
patch(origin(1)+aY,origin(2)+aX,origin(3)+1+aZ,'w'); %draw the arrows!

% Set the axis with equal unit.
axis equal
axis tight
% axis([-3,3,-3,3,-3,3])

% Set the view point
view(40,20);

end
